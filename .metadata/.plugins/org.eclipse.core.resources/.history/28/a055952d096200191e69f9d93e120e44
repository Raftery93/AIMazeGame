package ie.gmit.sw.ai.searchAlgorithms;

import javax.swing.JOptionPane;

import ie.gmit.sw.ai.Node;

public class BasicHillClimbingTraversator implements Traversator{
	private Node goal;
	private int stepsToExit;
	private boolean quitWhile = true;
	private boolean foundGoal;
	private Node pathGoal;

	
	public BasicHillClimbingTraversator(Node goal){
		this.goal = goal;
	}
	
	public void traverse(Node[][] maze, Node node) {
        long time = System.currentTimeMillis();
    	int visitCount = 0;
    	
    	Node next = null;
		while(node != null && quitWhile == true){
			node.setVisited(true);	
			visitCount++;
			
			if (node.isGoalNode()  && node.nodeType != 'P'){
		        time = System.currentTimeMillis() - time; //Stop the clock
		        //TraversatorStats.printStats(node, time, visitCount);
		        setStepsToExit(TraversatorStats.printStats(node, time, visitCount, false));
		        setFoundGoal(true);
				setPathGoal(node);
				System.out.println("Found goal node at: "+ node);
				break;
			}
			
			try { //Simulate processing each expanded node
				Thread.sleep(10);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			

			Node[] children = node.children(maze);			
			int fnext = Integer.MAX_VALUE;			
			for (int i = 0; i < children.length; i++) {					
				if (children[i].getHeuristic(goal) < fnext){
					next = children[i];
					fnext = next.getHeuristic(goal);	
				}
			}

						
			if (fnext >= node.getHeuristic(goal)){
				System.out.println("Cannot improve on current node " + node.toString() + " \nh(n)=" + node.getHeuristic(goal) + " = Local Optimum...");
				setStepsToExit(TraversatorStats.printStats(node, time, visitCount, false));
		        setFoundGoal(true);
				setPathGoal(node);
				JOptionPane.showMessageDialog(null, "I did not find the exit, this is the path I took", "InfoBox: " + "Unsuccessful...",
						JOptionPane.INFORMATION_MESSAGE);
				break;
			}
			node = next;	
			next = null;
			
			if(visitCount > 100) {
				System.out.println("Path is too long");
				quitWhile = false;
			}
		}
	}

	public int getStepsToExit() {
		return stepsToExit;
	}

	public void setStepsToExit(int stepsToExit) {
		this.stepsToExit = stepsToExit;
	}
	public boolean isFoundGoal() {
		return foundGoal;
	}

	public void setFoundGoal(boolean foundGoal) {
		this.foundGoal = foundGoal;
	}

	public Node getPathGoal() {
		return pathGoal;
	}

	public void setPathGoal(Node pathGoal) {
		this.pathGoal = pathGoal;
	}
}