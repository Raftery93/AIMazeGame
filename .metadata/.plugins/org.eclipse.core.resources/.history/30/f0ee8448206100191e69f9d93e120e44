package ie.gmit.sw.ai;

import java.util.Random;

public class Maze {

	// private char[][] maze; //An array does not lend itself to the type of mazge
	// generation alogs we use in the labs. There are no "walls" to carve...
	private Node[][] maze;
	private Node goal;
	private int goalPos;

	public Maze(int dimension) {
		maze = new Node[dimension][dimension];
		init();
		buildMaze();

		setGoalNode();
		unvisit();
		addFeature('M', 'X', 20);
		addFeature('A', 'X', 20);
		addFeature('W', 'X', 50);
		addFeature('?', 'X', 45);
		addFeature('B', 'X', 30);
		addFeature('H', 'X', 20);
		addFeature('N', 'X', 10);
		buildNodePaths();
	}

	private void init() {
		for (int row = 0; row < maze.length; row++) {
			for (int col = 0; col < maze[row].length; col++) {
				// maze[row][col] = '0'; //Index 0 is a hedge...
				maze[row][col] = new Node(row, col);
				maze[row][col].setNodeType('X');
				maze[row][col].setWalkable(false);
			}
		}
	}

	private void addFeature(char feature, char replace, int number) {
		int counter = 0;
		while (counter < number) { // Keep looping until feature number of items have been added.
			int row = (int) (maze.length * Math.random());
			int col = (int) (maze[0].length * Math.random());

			if (maze[row][col].getNodeType() == replace) {
				maze[row][col].nodeType = feature;
				counter++;
			}
		}
	}

	private void buildMaze() {
		for (int row = 0; row < maze.length; row++) {
			for (int col = 0; col < maze[row].length - 1; col++) {
				int num = (int) (Math.random() * 10);
				if(row == 0 || row == maze.length - 1 || col == 0 || col == maze.length - 1) {
					maze[row][col].setNodeType(' ');
					maze[row][col].setWalkable(false);
				}else if (num >= 5 && col + 1 < maze[row].length - 1) {
					// When char is set to ' ' this means its a free path or area to walk
					maze[row][col + 1].setNodeType(' ');
					maze[row][col + 1].setWalkable(true);
					continue;
				}
				if (row + 1 < maze.length) { // Check south
					maze[row + 1][col].setNodeType(' ');
					maze[row + 1][col].setWalkable(true);
				}
			}
		}
	}

	public void setGoalNode() { // Randomley set the goal node.

		Random random = new Random();
		int randRow = 0;
		int randCol = 0;
		boolean goalSet = false;

		while (goalSet != true) {

			this.setGoalPos(random.nextInt((2 - 0) + 1) + 0);

			switch (this.getGoalPos()) {
			case 0:
				// Creates the nodes on the bottom side of the maze
				randRow = random.nextInt(((maze.length - 15) - (maze.length - 16)) + 1) + (maze.length - 16);
				randCol = random.nextInt(((maze[0].length - 3) - 1) + 1) + 1;
				break;
			case 1:
				// Creates the nodes on the right side of the maze
				randRow = random.nextInt(((maze.length - 15) - 1) + 1) + 1;
				randCol = random.nextInt(((maze[0].length - 3) - (maze[0].length - 4)) + 1) + (maze[0].length - 4);
				break;
			case 2:
				// Creates the nodes on the top side of the maze
				randRow = random.nextInt((2 - 1) + 1) + 1;
				randCol = random.nextInt(((maze[0].length - 3) - 1) + 1) + 1;
				break;
			default: // Defaults to left side.
				randRow = random.nextInt(((maze.length - 15) - 1) + 1) + 1;
				randCol = random.nextInt(((maze[0].length - 3) - (maze[0].length - 4)) + 1) + (maze[0].length - 4);
				break;
			}

			try {
				if (maze[randRow][randCol].isWalkable()) {
					maze[randRow][randCol].setGoalNode(true);
					maze[randRow][randCol].setNodeType('G');
					maze[randRow][randCol].setWalkable(true);
					goal = maze[randRow][randCol];
					goalSet = true;
				}
			} catch (Exception e) {
			}
		}
	}

	protected void unvisit() {
		for (int i = 0; i < maze.length; i++) {
			for (int j = 0; j < maze[i].length; j++) {
				maze[i][j].setVisited(false);
				maze[i][j].setParent(null);
			}
		}
	}
	
	
	
	
	 private void buildNodePaths(){
	        for (int row = 0; row < maze.length; row++){
	            for (int col = 0; col < maze[row].length - 1; col++){
	                if(col < maze[row].length - 1)
	                    if(maze[row][col + 1].isWalkable()){
	                        maze[row][col].addPath(Node.Direction.West);
	                    }
	                if(col > 0)
	                    if(maze[row][col - 1].isWalkable()){
	                        maze[row][col].addPath(Node.Direction.East);
	                    }
	                if(row < maze.length - 1)
	                    if(maze[row + 1][col].isWalkable()){
	                        maze[row][col].addPath(Node.Direction.North);
	                    }
	                if(row > 0)
	                    if(maze[row - 1][col].isWalkable()){
	                        maze[row][col].addPath(Node.Direction.South);
	                    }
	            }
	        }
	    }
	

	private boolean isRoom(int row, int col) { // Flaky and only works half the time, but reduces the number of rooms
		return row > 1 && maze[row - 1][col].getNodeType() == ' ' && maze[row - 1][col + 1].getNodeType() == ' ';
	}

    public Node getGoalNode(){
        return this.goal;
    }

    public Node[][] getMaze(){
        return this.maze;
    }

    public int getGoalPos() {
        return goalPos;
    }

    public void setGoalPos(int goalPos) {
        this.goalPos = goalPos;
    }

	public String toString() {
		StringBuffer sb = new StringBuffer();
		for (int row = 0; row < maze.length; row++) {
			for (int col = 0; col < maze[row].length; col++) {
				sb.append(maze[row][col]);
				if (col < maze[row].length - 1)
					sb.append(",");
			}
			sb.append("\n");
		}
		return sb.toString();
	}
}