package ie.gmit.sw.ai;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import ie.gmit.sw.ai.nn.NnFight;
import ie.gmit.sw.ai.searchAlgorithms.*;

public class GameRunner implements KeyListener {
	public static final int MAZE_DIMENSION = 80;
	public static final int IMAGE_COUNT = 20;
	private ControlledSprite player;
	//private GameView view;
	//private Maze model;
	//private int currentRow;
	//private int currentCol;

	private JFrame gameFrame;
	private JPanel coverPanel;
	private JPanel leftPanel;
	private JPanel rightPanel;

	/*
	// Left panel elements
	private JLabel lblCurScore;
	private JLabel lblCurStepstoExit;
	private JLabel lblCurSteps;
	private JLabel lblHealthPoints;
	private JLabel lblArmorPoints;
	private JLabel lblCurWeapon;
	private JLabel lblCurWeaponStr;
	private JLabel lblCurSpecial;
	private JLabel lblEnemiesAmount;
	private JLabel lblCommonAmount;
	private JLabel lblBossesAmount;
	private JLabel lblCurDifficulty;
*/
	// Right panel elements
	//private JLabel lblCurExits;
	private JComboBox<String> gameDifficulty1;
	//private JComboBox<String> gameDifficulty2;

	// The game controller object instance & game view panel
	private GameView gamePanel;
	private GameSetup game;
	private Sprite[] sprites;
	//private double[] outcome = {0.0,0.0,0.0};
	private NnFight nnfight;
	private int nnIfHealth;
	private int nnHealth;
	private int nnWeaponStrength;
	private int nnAnger;
	private int deadSpider = 0;
	private int stepCount = 0;

	public GameRunner() throws Exception {

		nnfight = new NnFight();
		nnfight.train();
		newFrame();
		setupCoverPanel();
		gameFrame.repaint();

		/*
		 * model = new Maze(MAZE_DIMENSION); view = new GameView(model);
		 * 
		 * Sprite[] sprites = getSprites(); view.setSprites(sprites);
		 * 
		 * placePlayer();
		 * 
		 * Dimension d = new Dimension(GameView.DEFAULT_VIEW_SIZE,
		 * GameView.DEFAULT_VIEW_SIZE); view.setPreferredSize(d);
		 * view.setMinimumSize(d); view.setMaximumSize(d);
		 * 
		 * JFrame f = new JFrame("GMIT - B.Sc. in Computing (Software Development)");
		 * f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.addKeyListener(this);
		 * f.getContentPane().setLayout(new FlowLayout()); f.add(view);
		 * f.setSize(1000,1000); f.setLocation(100,100); f.pack(); f.setVisible(true);
		 */
	}

	// Abstract the different parts of building the view.
	private void newFrame() {
		gameFrame = new JFrame("GMIT - B.Sc. in Computing (Software Development) - Conor Raftery");
		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.addKeyListener(this);
		gameFrame.getContentPane().setLayout(null);
		gameFrame.getContentPane().setBackground(Color.black);
		gameFrame.setSize(1200, 750);
		gameFrame.setResizable(false);
		gameFrame.setLocationRelativeTo(null);
		gameFrame.setVisible(true);
	}

	// main menu frame
	private void setupCoverPanel() {
		// Setting up cover panel when game first starts
		
		coverPanel = new JPanel();
		coverPanel.setBounds(204, 0, 797, 670);
		coverPanel.setBackground(Color.GREEN);
		coverPanel.setLayout(null);
		gameFrame.getContentPane().add(coverPanel);
		//////////////////////////////Title
		
		JLabel label1 = new JLabel("AI Killer Spiders");
		label1.setForeground(Color.WHITE);
		label1.setFont(new Font("Serif", Font.BOLD, 40));
		label1.setBounds(255, 200, 750, 100);
		coverPanel.add(label1);

		///////////////////////////Difficulty drop down
		
		JLabel label = new JLabel("Difficulty:");
		label.setForeground(Color.WHITE);
		label.setFont(new Font("Serif", Font.BOLD, 24));
		label.setBounds(307, 350, 126, 24);
		coverPanel.add(label);

		gameDifficulty1 = new JComboBox<String>();
		gameDifficulty1.setFont(new Font("Serif", Font.BOLD, 24));
		gameDifficulty1.setBounds(435, 350, 120, 30);
		gameDifficulty1.addItem("Easy");
		gameDifficulty1.addItem("Normal");
		gameDifficulty1.addItem("Hard");
		gameDifficulty1.setSelectedIndex(1);
		gameDifficulty1.setFocusable(false);
		coverPanel.add(gameDifficulty1);

		////////////////////////////////Starts new game button
		
		JButton btnNewGame = new JButton("New Game");
		btnNewGame.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				gameFrame.getContentPane().remove(coverPanel);
			    GameStats.setupLeftPanel(leftPanel, gameFrame);
				GameStats.setupRightPanel(rightPanel, gameFrame);
				initNewGame(gameDifficulty1.getSelectedItem().toString());
			}
		});
		btnNewGame.setFont(new Font("Serif", Font.BOLD, 24));
		btnNewGame.setBounds(332, 430, 211, 33);
		btnNewGame.setFocusable(false);
		coverPanel.add(btnNewGame);
		
		///////////////////////////////////
	}
	
	
	public void initNewGame(String gameDifficulty) {
		// Initializing the game, panel and killing old enemy threads if they exist

		if (game != null)
			game.killEnemyThreads();

		if (gamePanel != null)
			gameFrame.getContentPane().remove(gamePanel);

		game = new GameSetup();

		newGame(gameDifficulty);
		//lblCurDifficulty.setText(gameDifficulty);
		//gameDifficulty2.setSelectedItem(gameDifficulty);

		gameFrame.repaint();
		// Making sure if the player block is suitable to search for the amount of steps
		// to goal
		if (game.getPlayer().getStepsToExit() <= 0)
			initNewGame(gameDifficulty);
	}
	
	
	private void newGame(String gameDifficulty) {
		// Create new player & enemy instances here

		Maze model = new Maze(MAZE_DIMENSION);
		Node[][] maze = model.getMaze(); // The already build maze.
		try {
			Weapon w = new Weapon("", 0);

			this.player = new ControlledSprite("Main Player", 3, w, "resources/images/player/d1.png", "resources/images/player/d2.png", "resources/images/player/d3.png", "resources/images/player/l1.png", "resources/images/player/l2.png", "resources/images/player/l3.png", "resources/images/player/r1.png", "resources/images/player/r2.png", "resources/images/player/r3.png");
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		ArrayList<Spider> enemies = new ArrayList<Spider>();
		Dimension d = new Dimension(800, 800);

		game.setModel(model);
		game.setMaze(maze);
		game.setPlayer(player);
		game.setEnemies(enemies);
		game.placePlayer(model.getGoalPos());
		game.setupEnemies(gameDifficulty);
		
		try {
			sprites = getSprites();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			System.out.println("Error reading images.");
			e.printStackTrace();
		}
		gamePanel = new GameView(game, sprites); // Pass sprites in here.
		gamePanel.setBounds(204, 0, 800, 700);
		gamePanel.setPreferredSize(d);
		gamePanel.setMinimumSize(d);
		gamePanel.setMaximumSize(d);
		gameFrame.getContentPane().add(gamePanel);

		updateView();
	}

	private void updateView() {
		gamePanel.setCurrentRow(game.getPlayer().getRowPos());
		gamePanel.setCurrentCol(game.getPlayer().getColPos());
		GameStats.updateStatsGUI(game);
	}

	public void keyPressed(KeyEvent e) {
		
		if (game.getPlayer() == null || game.getPlayer().isGameOver()) return; // If the game is over, don't do anything.
		// Check here if the block is a bomb or weapon etc
				if (e.getKeyCode() == KeyEvent.VK_RIGHT && game.getPlayer().getColPos() < MAZE_DIMENSION - 1) {
					if (isValidMove(game.getPlayer().getRowPos(), game.getPlayer().getColPos() + 1) && game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos() + 1].isWalkable()) {
						gamePanel.setPlayerState(6);
						game.getPlayer().setColPos(game.getPlayer().getColPos() + 1);
						game.getPlayer().setSteps(game.getPlayer().getSteps() + 1);
						game.getPlayer().setDirection(Direction.RIGHT);
					}
				} else if (e.getKeyCode() == KeyEvent.VK_LEFT && game.getPlayer().getColPos() > 0) {
					if (isValidMove(game.getPlayer().getRowPos(), game.getPlayer().getColPos() - 1) && game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos() - 1].isWalkable()) {
						gamePanel.setPlayerState(6);
						game.getPlayer().setColPos(game.getPlayer().getColPos() - 1);
						game.getPlayer().setSteps(game.getPlayer().getSteps() + 1);
						game.getPlayer().setDirection(Direction.LEFT);
					}
				} else if (e.getKeyCode() == KeyEvent.VK_UP && game.getPlayer().getRowPos() > 0) {
					if (isValidMove(game.getPlayer().getRowPos() - 1, game.getPlayer().getColPos()) && game.getMaze()[game.getPlayer().getRowPos() - 1][game.getPlayer().getColPos()].isWalkable()) {
						gamePanel.setPlayerState(6);
						game.getPlayer().setRowPos(game.getPlayer().getRowPos() - 1);
						game.getPlayer().setSteps(game.getPlayer().getSteps() + 1);
						game.getPlayer().setDirection(Direction.UP);
					}
				} else if (e.getKeyCode() == KeyEvent.VK_DOWN && game.getPlayer().getRowPos() < MAZE_DIMENSION - 1) {
					if (isValidMove(game.getPlayer().getRowPos() + 1, game.getPlayer().getColPos()) && game.getMaze()[game.getPlayer().getRowPos() + 1][game.getPlayer().getColPos()].isWalkable()) {
						gamePanel.setPlayerState(6);
						game.getPlayer().setRowPos(game.getPlayer().getRowPos() + 1);
						game.getPlayer().setSteps(game.getPlayer().getSteps() + 1);
						game.getPlayer().setDirection(Direction.DOWN);
					}
				} else if (e.getKeyCode() == KeyEvent.VK_Z) {
					gamePanel.toggleZoom();
				} else if (e.getKeyCode() == KeyEvent.VK_S) {
					// If the player hasn't picked up any special pickup items then return
				if (game.getPlayer().getSpecial() <= 0) {
					return;
				}else {
					// Creates a new search algorithm object to find the goal node, randomly
					//Traversator traverse = randomSearch(new Random().nextInt((3 - 0) + 1) + 0);
					//Traversator traverse = algorithm(3); // Try to make it do BestFirstSearch.
					//Traversator traverse = algorithm(4); // Try to make it do HillCliming.
					//Traversator traverse = algorithm(1); // Try to make it do Beam.
					//Traversator traverse = algorithm(2); // Try to make it do SimulatedAnnealing.
					//Traversator traverse = algorithm(5); // Try to make it do DLDFS.
					Traversator traverse = algorithm(1); // Try to make it do A*.
					traverse.traverse(game.getMaze(), game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()]);
					game.getPlayer().setSearchCount(game.getPlayer().getSearchCount() + 1);
					game.getPlayer().setSpecial(game.getPlayer().getSpecial() - 1);
				}
		}
		updateView();
	}

	public void keyReleased(KeyEvent e) {
	} // Ignore

	public void keyTyped(KeyEvent e) {
	} // Ignore

	private boolean isValidMove(int r, int c) {
		
		stepCount++;
		//i// Error checking the move position
		if (!(r <= game.getMaze().length - 1 && c <= game.getMaze()[r].length - 1)) return false;

		//System.out.println("Node type: "+game.getMaze()[r][c].getNodeType());
		//System.out.println(game.getPlayer().getWeaponName());
		
		nnIfHealth = player.getHealth() + player.getArmor();
		
		if(nnIfHealth < 66){
			nnHealth = 0;
		}else if(nnIfHealth < 130 && nnIfHealth > 66) {
			nnHealth = 1;
		}else if(nnIfHealth > 130){
			nnHealth = 2;
		}else {
			nnHealth = 0;
		}
		
		if(player.getWeaponStrength() > 0) {
			nnWeaponStrength = 1;
		}else {
			nnWeaponStrength = 0;
		}
		
		if(deadSpider == 0) {
			nnAnger = 1;
		}else {
			nnAnger = 0;
		}
		
		if(stepCount % 2 == 0) {
			try {
				nnfight.action(nnHealth, nnWeaponStrength, nnAnger);
				System.out.println(nnHealth +" "+ nnWeaponStrength+ " "+ nnAnger);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
		switch (game.getMaze()[r][c].getNodeType()) {
			case ' ':
				// Health pick up,
				//System.out.println("Player moved to space");
				game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setNodeType(' ');
				game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setGoalNode(false);
				game.getMaze()[r][c].setNodeType('P');
				game.getMaze()[r][c].setGoalNode(true);
				return true;
			case 'W':
				// Sword pick up, the least powerful weapon in the game
				if (!game.getPlayer().getWeaponName().equals("Sword")) {
					game.getPlayer().setWeaponName("Sword");
					game.getPlayer().setWeaponStrength(45);
					game.getMaze()[r][c].setNodeType('X');
					//PlaySound.play("res/power_up.wav");
				}
				return true;
			case '?':
				Traversator traverse = algorithm(5); // Try to make it do A*.
				//System.out.println("Steps to exit: " + traverse.getStepsToExit());
				traverse.traverse(game.getMaze(), game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()]);
				System.out.println("Steps to exit: " + traverse.getStepsToExit());
				
				// Help me pick up, shows the player a possible route to the goal
				//game.getPlayer().setSpecial(game.getPlayer().getSpecial() + 1);
				//game.getMaze()[r][c].setNodeType('X');
				//PlaySound.play("res/power_up.wav");
				return true;
			case 'B':
				// A bomb pick up, very powerful bomb that kills enemies very well
				if (!game.getPlayer().getWeaponName().equals("Bomb")) {
					game.getPlayer().setWeaponName("Bomb");
					game.getPlayer().setWeaponStrength(65);
					game.getMaze()[r][c].setNodeType('X');
					//PlaySound.play("res/power_up.wav");
				}
				return true;
			case 'H':
				// A hydrogen bomb pick up, extremely powerful and deadly weapon
				if (!game.getPlayer().getWeaponName().equals("H-Bomb")) {
					game.getPlayer().setWeaponName("H-Bomb");
					game.getPlayer().setWeaponStrength(85);
					game.getMaze()[r][c].setNodeType('X');
					//PlaySound.play("res/power_up.wav");
				}
				return true;
			case 'M':
				// Health pick up, adds 50 health to players character
				if (game.getPlayer().getHealth() < 100) {
					game.getPlayer().setHealth(game.getPlayer().getHealth() + 50);
					if (game.getPlayer().getHealth() > 100)
						game.getPlayer().setHealth(100);
					game.getMaze()[r][c].setNodeType('X');
					//PlaySound.play("res/power_up.wav");
				}
				return true;
			case 'A':
				// Health pick up, adds 50 health to players character
				if (game.getPlayer().getArmor() < 100) {
					game.getPlayer().setArmor(game.getPlayer().getArmor() + 50);
					if (game.getPlayer().getArmor() > 100)
						game.getPlayer().setArmor(100);
					game.getMaze()[r][c].setNodeType('X');
					//PlaySound.play("res/power_up.wav");
				}
				return true;
			case 'T':
				game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setNodeType(' ');
				game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setGoalNode(false);
				game.getMaze()[r][c].setNodeType('P');
				game.getMaze()[r][c].setGoalNode(true);
				return true;
			case 'G':
				game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setNodeType(' ');
				game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setGoalNode(false);
				game.getMaze()[r][c].setNodeType('Z');
				game.getPlayer().setGameOver(true);
				//PlaySound.play("res/win_game.wav");
				return true;
			case 'N':
				if (!game.getPlayer().getWeapon().equals("Pipe Bomb")) {
					game.getPlayer().setWeaponName("Pipe Bomb");
					game.getPlayer().setWeaponStrength(100);
					game.getMaze()[r][c].setNodeType('X');
					//PlaySound.play("res/power_up.wav");
				}
				return true;
			case 'E':
				FuzzyFight fuzzyBattle1 = new FuzzyFight();
				boolean enemyWon1 = fuzzyBattle1.startBattle(game.getPlayer(), game.getEnemies().get(game.getMaze()[r][c].getEnemyID()), "resources/fuzzy/fuzzyFight.fcl");
				if (enemyWon1 == true) {
					// The player has lost the game!
					game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setNodeType(' ');
					game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setEnemyID(0);
					game.getPlayer().setGameOver(true);
					game.getMaze()[r][c].setNodeType('L');
					//PlaySound.play("res/lose_game.wav");
					return false;
				} else {
					game.getEnemies().get(game.getMaze()[r][c].getEnemyID()).setHealth(0);
					game.getMaze()[r][c].setNodeType('D');
					game.getMaze()[r][c].setEnemyID(0);
					deadSpider++;
					//PlaySound.play("res/win_fight.wav");
					return false;
				}
			case 'F':
				FuzzyFight fuzzyBattle2 = new FuzzyFight();
				boolean enemyWon2 = fuzzyBattle2.startBattle(game.getPlayer(), game.getEnemies().get(game.getMaze()[r][c].getEnemyID()), "resources/fuzzy/fuzzyFight.fcl");
				if (enemyWon2 == true) {
					// The player has lost the game!
					game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setNodeType(' ');
					game.getMaze()[game.getPlayer().getRowPos()][game.getPlayer().getColPos()].setEnemyID(0);
					game.getPlayer().setGameOver(true);
					game.getMaze()[r][c].setNodeType('D');
					//PlaySound.play("res/lose_game.wav");
					return false;
				} else {
					game.getEnemies().get(game.getMaze()[r][c].getEnemyID()).setHealth(0);
					game.getMaze()[r][c].setNodeType('L');
					game.getMaze()[r][c].setEnemyID(0);
					deadSpider++;
					//PlaySound.play("res/win_fight.wav");
					return false;
				}
			default:
				return false;
}
	}
	
	
	
	private Traversator algorithm(int randNum) {
		// Selecting a random algorithm to be created and returned
		switch (randNum) {
			case 0:
				return new AStarTraversator(game.getModel().getGoalNode(), false);
			case 1:
				System.out.println("Calling beam search");
				return new BeamTraversator(game.getModel().getGoalNode(), 10);
			case 2:
				System.out.println("Calling brute force search");
				return new BruteForceTraversator(false);
			case 3:
				return new BestFirstTraversator(game.getModel().getGoalNode());
			case 4:
				System.out.println("Calling basic hill climbing search");
				return new BasicHillClimbingTraversator(game.getModel().getGoalNode());
			case 5:
				//return new DepthLimitedDFSTraversator(game.getMaze().length);
				return new DepthLimitedDFSTraversator(5); // Only works sometimes.
			default:
				return new AStarTraversator(game.getModel().getGoalNode(), false);
		}
}

	private Sprite[] getSprites() throws Exception {
		// Read in the images from the resources directory as sprites. Note that each
		// sprite will be referenced by its index in the array, e.g. a 3 implies a
		// Bomb...
		// Ideally, the array should dynamically created from the images...

	//	player = new ControlledSprite("Main Player", 3, "resources/images/player/d1.png",
	//			"resources/images/player/d2.png", "resources/images/player/d3.png", "resources/images/player/l1.png",
	//			"resources/images/player/l2.png", "resources/images/player/l3.png", "resources/images/player/r1.png",
	//	"resources/images/player/r2.png", "resources/images/player/r3.png");
		
		

		Sprite[] sprites = new Sprite[IMAGE_COUNT];
		sprites[0] = new Sprite("Hedge", 1, "resources/images/objects/hedge.png");
		sprites[1] = new Sprite("Sword", 1, "resources/images/objects/sword.png");
		sprites[2] = new Sprite("Help", 1, "resources/images/objects/help.png");
		sprites[3] = new Sprite("Bomb", 1, "resources/images/objects/bomb.png");
		sprites[4] = new Sprite("Hydrogen Bomb", 1, "resources/images/objects/h_bomb.png");
		sprites[5] = this.player;//new Sprite("Player", 3, "resources/images/player/d1.png", "resources/images/player/d2.png", "resources/images/player/d3.png");
		sprites[6] = new Sprite("Player2", 1, "resources/images/player/d2.png");
		sprites[7] = new Sprite("Red1", 1, "resources/images/spiders/red_spider_1.png");//, "resources/images/spiders/red_spider_2.png");
		sprites[8] = new Sprite("Red2", 1, "resources/images/spiders/red_spider_2.png");
		sprites[9] = new Sprite("Blue2", 1, "resources/images/spiders/blue_spider_2.png");
		sprites[10] = new Sprite("Green1", 1, "resources/images/objects/coin.png");//Change to arrows
		sprites[11] = new Sprite("Health", 1, "resources/images/objects/health.png");
		sprites[12] = new Sprite("Armor", 1, "resources/images/objects/armor.png");
		sprites[13] = new Sprite("Goal", 1, "resources/images/objects/trophy.jpg");
		sprites[14] = new Sprite("End Goal", 1, "resources/images/objects/trophy.jpg");
		sprites[15] = new Sprite("Lose", 1, "resources/images/objects/lose.png");
		sprites[16] = new Sprite("Player", 1, "resources/images/player/d1.png");
		sprites[17] = new Sprite("Bomb", 1, "resources/images/objects/bomb.png");
		sprites[18] = new Sprite("Black1", 1, "resources/images/spiders/black_spider_1.png");//, "resources/images/spiders/black_spider_2.png");
		sprites[19] = new Sprite("Black2", 1, "resources/images/spiders/black_spider_2.png");
		
		/*
		sprites[6] = new Sprite("Black Spider", 2, "resources/images/spiders/black_spider_1.png",
				"resources/images/spiders/black_spider_2.png");
		sprites[7] = new Sprite("Blue Spider", 2, "resources/images/spiders/blue_spider_1.png",
				"resources/images/spiders/blue_spider_2.png");
		sprites[8] = new Sprite("Brown Spider", 2, "resources/images/spiders/brown_spider_1.png",
				"resources/images/spiders/brown_spider_2.png");
		sprites[9] = new Sprite("Green Spider", 2, "resources/images/spiders/green_spider_1.png",
				"resources/images/spiders/green_spider_2.png");
		sprites[10] = new Sprite("Grey Spider", 2, "resources/images/spiders/grey_spider_1.png",
				"resources/images/spiders/grey_spider_2.png");
		sprites[11] = new Sprite("Orange Spider", 2, "resources/images/spiders/orange_spider_1.png",
				"resources/images/spiders/orange_spider_2.png");
		sprites[12] = new Sprite("Red Spider", 2, "resources/images/spiders/red_spider_1.png",
				"resources/images/spiders/red_spider_2.png");
		sprites[13] = new Sprite("Yellow Spider", 2, "resources/images/spiders/yellow_spider_1.png",
				"resources/images/spiders/yellow_spider_2.png");
				*/
		return sprites;
	} 

	public static void main(String[] args) throws Exception {
		new GameRunner();
	}
}